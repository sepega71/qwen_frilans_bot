#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤.
"""

import logging
import asyncio
from typing import Dict, List, Optional, Any
from telegram import Update, Bot, Message, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    CallbackQueryHandler
)

# –ò–º–ø–æ—Ä—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
from user_settings_manager import UserSettingsManager
from data_storage import DataStorage
from filter_engine import FilterEngine
from personalization_engine import PersonalizationEngine
from notification_engine import NotificationEngine
from notification_scheduler import NotificationScheduler
from user_interaction_tracker import UserInteractionTracker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class FreelanceBot:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –¥–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    
    def __init__(self, token: str, data_storage: DataStorage, filter_engine: FilterEngine,
                 personalization_engine: PersonalizationEngine, notification_engine: NotificationEngine,
                 notification_scheduler: NotificationScheduler, user_interaction_tracker: UserInteractionTracker):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        
        Args:
            token: –¢–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
            data_storage: –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
            filter_engine: –î–≤–∏–∂–æ–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            personalization_engine: –î–≤–∏–∂–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
            notification_engine: –î–≤–∏–∂–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            notification_scheduler: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            user_interaction_tracker: –¢—Ä–µ–∫–µ—Ä –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        """
        self.token = token
        self.application = Application.builder().token(self.token).build()
        self.user_settings_manager = UserSettingsManager()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.data_storage = data_storage
        self.filter_engine = filter_engine
        self.personalization_engine = personalization_engine
        self.notification_engine = notification_engine
        self.notification_scheduler = notification_scheduler
        self.user_interaction_tracker = user_interaction_tracker
        
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("settings", self.settings_command))
        self.application.add_handler(CommandHandler("filter", self.filter_command))
        self.application.add_handler(CommandHandler("subscribe", self.subscribe_command))
        self.application.add_handler(CommandHandler("unsubscribe", self.unsubscribe_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.text_handler))
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("add_keywords", add_keywords))
        self.application.add_handler(CommandHandler("remove_keywords", remove_keywords))
        self.application.add_handler(CommandHandler("add_tech", add_technologies))
        self.application.add_handler(CommandHandler("remove_tech", remove_technologies))
        self.application.add_handler(CommandHandler("set_budget", set_budget))
        self.application.add_handler(CommandHandler("set_region", set_regions))
        self.application.add_handler(CommandHandler("set_project_type", set_project_types))
        self.application.add_handler(CommandHandler("set_experience", set_experience_level))
        self.application.add_handler(CommandHandler("set_payment_type", set_payment_type))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        """
        user = update.effective_user
        user_id = user.id
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
        keyboard = [
            [
                InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings'),
                InlineKeyboardButton("–§–∏–ª—å—Ç—Ä—ã", callback_data='filters')
            ],
            [
                InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data='subscribe'),
                InlineKeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data='unsubscribe')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            "–Ø - –±–æ—Ç –¥–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç, —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∏ "
            "—Ä–∞—Å—Å—ã–ª–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π\n"
            "/filter - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞\n"
            "/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É\n"
            "/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n"
            "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"
        )
        
        await update.message.reply_text(message, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
        """
        message = (
            "ü§ñ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
            "üîç –°–±–æ—Ä –∑–∞–∫–∞–∑–æ–≤ –∏ –≤–∞–∫–∞–Ω—Å–∏–π:\n"
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:\n"
            "- fl.ru\n"
            "- weblancer.net\n"
            "- freemarket.ru\n"
            "- GitHub (open-source –ø—Ä–æ–µ–∫—Ç—ã)\n\n"
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤:\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ:\n"
            "- –ö–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n"
            "- –°—Ç–µ–∫—É —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π\n"
            "- –ë—é–¥–∂–µ—Ç—É (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π/–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π)\n"
            "- –†–µ–≥–∏–æ–Ω—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
            "- –¢–∏–ø—É –ø—Ä–æ–µ–∫—Ç–∞ (–∑–∞–∫–∞–∑ –∏–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è)\n"
            "- –û–ø—ã—Ç—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n"
            "- –§–æ—Ä–º–µ –æ–ø–ª–∞—Ç—ã\n\n"
            "üîî –†–∞—Å—Å—ã–ª–∫–∞:\n"
            "–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è "
            "–æ –Ω–æ–≤—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö —Å –≤–∞—à–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏.\n\n"
            "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /settings –∏ /filter"
        )
        
        await update.message.reply_text(message)
    
    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /settings
        """
        user_id = update.effective_user.id
        settings = self.user_settings_manager.get_user_settings(user_id)
        
        message = (
            "‚öôÔ∏è –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞: {'–î–∞' if settings.subscribed else '–ù–µ—Ç'}\n"
            f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(settings.filters.keywords) if settings.filters.keywords else '–ù–µ –∑–∞–¥–∞–Ω—ã'}\n"
            f"–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {', '.join(settings.filters.technologies) if settings.filters.technologies else '–ù–µ –∑–∞–¥–∞–Ω—ã'}\n"
            f"–ë—é–¥–∂–µ—Ç: {f'{settings.filters.budget_min}-{settings.filters.budget_max}' if settings.filters.budget_min or settings.filters.budget_max else '–õ—é–±–æ–π'}\n"
            f"–†–µ–≥–∏–æ–Ω—ã: {', '.join(settings.filters.regions) if settings.filters.regions else '–õ—é–±—ã–µ'}\n"
            f"–¢–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–æ–≤: {', '.join(settings.filters.project_types) if settings.filters.project_types else '–õ—é–±—ã–µ'}\n"
            f"–£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞: {settings.filters.experience_level if settings.filters.experience_level else '–õ—é–±–æ–π'}\n"
            f"–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã: {settings.filters.payment_type if settings.filters.payment_type else '–õ—é–±–∞—è'}\n\n"
            "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/filter - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞\n"
            "/subscribe –∏–ª–∏ /unsubscribe - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π"
        )
        
        await update.message.reply_text(message)
    
    async def filter_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /filter
        """
        message = (
            "üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤:\n\n"
            "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: /add_keywords —Å–ª–æ–≤–æ1, —Å–ª–æ–≤–æ2\n"
            "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: /remove_keywords —Å–ª–æ–≤–æ1, —Å–ª–æ–≤–æ2\n"
            "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π: /add_tech —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è1, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è2\n"
            "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π: /remove_tech —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è1, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è2\n\n"
            "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—é–¥–∂–µ—Ç–∞: /set_budget –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π_–±—é–¥–∂–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π_–±—é–¥–∂–µ—Ç\n\n"
            "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞: /set_region —Ä–µ–≥–∏–æ–Ω1, —Ä–µ–≥–∏–æ–Ω2\n\n"
            "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞: /set_project_type –∑–∞–∫–∞–∑,–≤–∞–∫–∞–Ω—Å–∏—è\n\n"
            "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è –æ–ø—ã—Ç–∞: /set_experience —É—Ä–æ–≤–µ–Ω—å\n\n"
            "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã: /set_payment_type —Ñ–æ—Ä–º–∞_–æ–ø–ª–∞—Ç—ã\n\n"
            "–ü—Ä–∏–º–µ—Ä: /add_keywords python, telegram, bot"
        )
        
        await update.message.reply_text(message)
    
    async def subscribe_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /subscribe
        """
        user_id = update.effective_user.id
        self.user_settings_manager.update_user_subscription(user_id, True)
        
        await update.message.reply_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏ –≤–∞–∫–∞–Ω—Å–∏–π!")
    
    async def unsubscribe_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /unsubscribe
        """
        user_id = update.effective_user.id
        self.user_settings_manager.update_user_subscription(user_id, False)
        
        await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe")
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
        """
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        settings = self.user_settings_manager.get_user_settings(user_id)
        
        if query.data == 'settings':
            message = (
                "‚öôÔ∏è –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
                f"–ü–æ–¥–ø–∏—Å–∫–∞: {'–î–∞' if settings.subscribed else '–ù–µ—Ç'}\n"
                f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(settings.filters.keywords) if settings.filters.keywords else '–ù–µ –∑–∞–¥–∞–Ω—ã'}\n"
                f"–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {', '.join(settings.filters.technologies) if settings.filters.technologies else '–ù–µ –∑–∞–¥–∞–Ω—ã'}\n"
                f"–ë—é–¥–∂–µ—Ç: {f'{settings.filters.budget_min}-{settings.filters.budget_max}' if settings.filters.budget_min or settings.filters.budget_max else '–õ—é–±–æ–π'}\n"
                f"–†–µ–≥–∏–æ–Ω—ã: {', '.join(settings.filters.regions) if settings.filters.regions else '–õ—é–±—ã–µ'}\n"
                f"–¢–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–æ–≤: {', '.join(settings.filters.project_types) if settings.filters.project_types else '–õ—é–±—ã–µ'}\n"
                f"–£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞: {settings.filters.experience_level if settings.filters.experience_level else '–õ—é–±–æ–π'}\n"
                f"–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã: {settings.filters.payment_type if settings.filters.payment_type else '–õ—é–±–∞—è'}"
            )
            
            await query.edit_message_text(text=message)
        
        elif query.data == 'filters':
            message = (
                "üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤:\n\n"
                "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: /add_keywords —Å–ª–æ–≤–æ1, —Å–ª–æ–≤–æ2\n"
                "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: /remove_keywords —Å–ª–æ–≤–æ1, —Å–ª–æ–≤–æ2\n\n"
                "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π: /add_tech —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è1, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è2\n"
                "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π: /remove_tech —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è1, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è2\n\n"
                "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—é–¥–∂–µ—Ç–∞: /set_budget –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π_–±—é–¥–∂–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π_–±—é–¥–∂–µ—Ç\n\n"
                "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞: /set_region —Ä–µ–≥–∏–æ–Ω1, —Ä–µ–≥–∏–æ–Ω2\n\n"
                "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞: /set_project_type –∑–∞–∫–∞–∑,–≤–∞–∫–∞–Ω—Å–∏—è\n\n"
                "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è –æ–ø—ã—Ç–∞: /set_experience —É—Ä–æ–≤–µ–Ω—å\n\n"
                "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã: /set_payment_type —Ñ–æ—Ä–º–∞_–æ–ø–ª–∞—Ç—ã\n\n"
                "–ü—Ä–∏–º–µ—Ä: /add_keywords python, telegram, bot"
            )
            
            await query.edit_message_text(text=message)
        
        elif query.data == 'subscribe':
            self.user_settings_manager.update_user_subscription(user_id, True)
            await query.edit_message_text(text="‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏ –≤–∞–∫–∞–Ω—Å–∏–π!")
        
        elif query.data == 'unsubscribe':
            self.user_settings_manager.update_user_subscription(user_id, False)
            await query.edit_message_text(text="‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe")
    
    async def text_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        message = (
            "–Ø - –±–æ—Ç –¥–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤. –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞—é, —Ñ–∏–ª—å—Ç—Ä—É—é –∏ "
            "—Ä–∞—Å—Å—ã–ª–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏ –≤–∞–∫–∞–Ω—Å–∏–∏.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n"
            "/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π\n"
            "/filter - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞\n"
            "/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É\n"
            "/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"
        )
        
        await update.message.reply_text(message)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ run_polling"""
        logger.info("–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–∞ –≤ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.application.bot_data['bot_core'] = self
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        self.register_handlers()
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
        self.application.run_polling(drop_pending_updates=True)
    
    async def send_notification(self, user_id: int, message: str):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        try:
            await self.application.bot.send_message(chat_id=user_id, text=message)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    async def handle_project_notification_request(self, project_data: Dict[str, Any]):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ø—Ä–æ–µ–∫—Ç–µ
        
        Args:
            project_data: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ –¥–≤–∏–∂–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        results = await self.notification_engine.send_personalized_notifications_for_projects([project_data])
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ø—Ä–æ–µ–∫—Ç–µ. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results}")
    
    async def track_user_interaction(self, user_id: int, project_id: int, interaction_type: str):
        """
        –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–µ–∫—Ç–æ–º
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            project_id: ID –ø—Ä–æ–µ–∫—Ç–∞
            interaction_type: –¢–∏–ø –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        """
        self.user_interaction_tracker.record_interaction(user_id, project_id, interaction_type)
        logger.info(f"–ó–∞–ø–∏—Å–∞–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –ø—Ä–æ–µ–∫—Ç {project_id}, —Ç–∏–ø {interaction_type}")


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def add_keywords(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Ñ–∏–ª—å—Ç—Ä"""
    user_id = update.effective_user.id
    bot_core = context.bot_data.get('bot_core')
    
    if not bot_core:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    if context.args:
        keywords = [kw.strip() for kw in ' '.join(context.args).split(',')]
        bot_core.user_settings_manager.add_keywords(user_id, keywords)
        
        await update.message.reply_text(f"‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã: {', '.join(keywords)}")
    else:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞. –ü—Ä–∏–º–µ—Ä: /add_keywords python, telegram, bot")


async def remove_keywords(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞"""
    user_id = update.effective_user.id
    bot_core = context.bot_data.get('bot_core')
    
    if not bot_core:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    if context.args:
        keywords = [kw.strip() for kw in ' '.join(context.args).split(',')]
        
        bot_core.user_settings_manager.remove_keywords(user_id, keywords)
        
        await update.message.reply_text(f"‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —É–¥–∞–ª–µ–Ω—ã: {', '.join(keywords)}")
    else:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /remove_keywords python, telegram")


async def add_technologies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤ —Ñ–∏–ª—å—Ç—Ä"""
    user_id = update.effective_user.id
    bot_core = context.bot_data.get('bot_core')
    
    if not bot_core:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    if context.args:
        technologies = [tech.strip() for tech in ' '.join(context.args).split(',')]
        bot_core.user_settings_manager.add_technologies(user_id, technologies)
        
        await update.message.reply_text(f"‚úÖ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã: {', '.join(technologies)}")
    else:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏. –ü—Ä–∏–º–µ—Ä: /add_tech Python, JavaScript, React")


async def remove_technologies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞"""
    user_id = update.effective_user.id
    bot_core = context.bot_data.get('bot_core')
    
    if not bot_core:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    if context.args:
        technologies = [tech.strip() for tech in ' '.join(context.args).split(',')]
        
        bot_core.user_settings_manager.remove_technologies(user_id, technologies)
        
        await update.message.reply_text(f"‚úÖ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —É–¥–∞–ª–µ–Ω—ã: {', '.join(technologies)}")
    else:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /remove_tech Python, JavaScript")


async def set_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –±—é–¥–∂–µ—Ç–∞"""
    user_id = update.effective_user.id
    bot_core = context.bot_data.get('bot_core')
    
    if not bot_core:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    if len(context.args) >= 2:
        try:
            min_budget = int(context.args[0])
            max_budget = int(context.args[1])
            
            if min_budget > max_budget:
                await update.message.reply_text("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ")
                return
            
            bot_core.user_settings_manager.set_budget(user_id, min_budget, max_budget)
            
            await update.message.reply_text(f"‚úÖ –ë—é–¥–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {min_budget} - {max_budget}")
        except ValueError:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞. –ü—Ä–∏–º–µ—Ä: /set_budget 1000 5000")
    elif len(context.args) == 1:
        try:
            min_budget = int(context.args[0])
            
            bot_core.user_settings_manager.set_budget(user_id, min_budget=min_budget)
            
            await update.message.reply_text(f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {min_budget}")
        except ValueError:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞. –ü—Ä–∏–º–µ—Ä: /set_budget 10000 5000")
    else:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏/–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç. –ü—Ä–∏–º–µ—Ä: /set_budget 1000 50000")


async def set_regions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤"""
    user_id = update.effective_user.id
    bot_core = context.bot_data.get('bot_core')
    
    if not bot_core:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    if context.args:
        regions = [region.strip() for region in ' '.join(context.args).split(',')]
        bot_core.user_settings_manager.set_regions(user_id, regions)
        
        await update.message.reply_text(f"‚úÖ –†–µ–≥–∏–æ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã: {', '.join(regions)}")
    else:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω—ã. –ü—Ä–∏–º–µ—Ä: /set_region –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")


async def set_project_types(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    user_id = update.effective_user.id
    bot_core = context.bot_data.get('bot_core')
    
    if not bot_core:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    if context.args:
        valid_types = ['–∑–∞–∫–∞–∑', '–≤–∞–∫–∞–Ω—Å–∏—è', 'order', 'vacancy']
        project_types = [pt.strip().lower() for pt in ' '.join(context.args).split(',')]
        
        invalid_types = [pt for pt in project_types if pt not in valid_types]
        if invalid_types:
            await update.message.reply_text(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–æ–≤: {', '.join(invalid_types)}. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: –∑–∞–∫–∞–∑, –≤–∞–∫–∞–Ω—Å–∏—è, order, vacancy")
            return
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        normalized_types = []
        for pt in project_types:
            if pt in ['–∑–∞–∫–∞–∑', 'order']:
                normalized_types.append('order')
            elif pt in ['–≤–∞–∫–∞–Ω—Å–∏—è', 'vacancy']:
                normalized_types.append('vacancy')
        
        bot_core.user_settings_manager.set_project_types(user_id, normalized_types)
        
        type_names = {'order': '–∑–∞–∫–∞–∑', 'vacancy': '–≤–∞–∫–∞–Ω—Å–∏—è'}
        display_types = [type_names[pt] for pt in normalized_types]
        
        await update.message.reply_text(f"‚úÖ –¢–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã: {', '.join(display_types)}")
    else:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–æ–≤. –ü—Ä–∏–º–µ—Ä: /set_project_type –∑–∞–∫–∞–∑,–≤–∞–∫–∞–Ω—Å–∏—è")


async def set_experience_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –æ–ø—ã—Ç–∞"""
    user_id = update.effective_user.id
    bot_core = context.bot_data.get('bot_core')
    
    if not bot_core:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    if context.args:
        valid_levels = ['–Ω–∞—á–∏–Ω–∞—é—â–∏–π', '—Å—Ä–µ–¥–Ω–∏–π', '–æ–ø—ã—Ç–Ω—ã–π', '—ç–∫—Å–ø–µ—Ä—Ç', 'junior', 'middle', 'senior', 'expert']
        level = ' '.join(context.args).lower()
        
        if level not in valid_levels:
            await update.message.reply_text(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {', '.join(valid_levels)}")
            return
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        level_mapping = {
            '–Ω–∞—á–∏–Ω–∞—é—â–∏–π': 'junior',
            '—Å—Ä–µ–¥–Ω–∏–π': 'middle',
            '–æ–ø—ã—Ç–Ω—ã–π': 'senior',
            '—ç–∫—Å–ø–µ—Ä—Ç': 'expert'
        }
        
        normalized_level = level_mapping.get(level, level)
        bot_core.user_settings_manager.set_experience_level(user_id, normalized_level)
        
        await update.message.reply_text(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {level}")
    else:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞. –ü—Ä–∏–º–µ—Ä: /set_experience junior")


async def set_payment_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã"""
    user_id = update.effective_user.id
    bot_core = context.bot_data.get('bot_core')
    
    if not bot_core:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    if context.args:
        valid_types = ['–ø–æ—á–∞—Å–æ–≤–∞—è', '—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è', '–ø—Ä–æ–µ–∫—Ç–Ω–∞—è', 'hourly', 'fixed', 'project']
        payment_type = ' '.join(context.args).lower()
        
        if payment_type not in valid_types:
            await update.message.reply_text(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {', '.join(valid_types)}")
            return
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        type_mapping = {
            '–ø–æ—á–∞—Å–æ–≤–∞—è': 'hourly',
            '—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è': 'fixed',
            '–ø—Ä–æ–µ–∫—Ç–Ω–∞—è': 'project'
        }
        
        normalized_type = type_mapping.get(payment_type, payment_type)
        bot_core.user_settings_manager.set_payment_type(user_id, normalized_type)
        
        await update.message.reply_text(f"‚úÖ –§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {payment_type}")
    else:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: /set_payment_type hourly")


def setup_bot_application(token: str):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏"""
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    data_storage = DataStorage()
    user_settings_manager = UserSettingsManager()
    filter_engine = FilterEngine()
    personalization_engine = PersonalizationEngine(user_settings_manager, filter_engine)
    user_interaction_tracker = UserInteractionTracker()
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notification_engine = NotificationEngine(
        token, user_settings_manager, data_storage, personalization_engine
    )
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notification_scheduler = NotificationScheduler(
        notification_engine, data_storage, personalization_engine
    )
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    bot_core = FreelanceBot(
        token, data_storage, filter_engine, personalization_engine,
        notification_engine, notification_scheduler, user_interaction_tracker
    )
    
    return bot_core


if __name__ == "__main__":
    import os
    from config import TELEGRAM_BOT_TOKEN
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥–∞
    token = os.getenv('TELEGRAM_BOT_TOKEN') or TELEGRAM_BOT_TOKEN
    
    if not token:
        print("–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ.")
    else:
        bot = setup_bot_application(token)
        print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–ø—É—Å–∫...")
        bot.run()
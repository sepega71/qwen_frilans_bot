#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
–£–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏.
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""

from typing import Dict, List, Any
from user_settings_manager import UserSettingsManager, UserSettings
from filter_engine import FilterEngine


class PersonalizationEngine:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    
    def __init__(self, user_settings_manager: UserSettingsManager, filter_engine: FilterEngine):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        
        Args:
            user_settings_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            filter_engine: –î–≤–∏–∂–æ–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        """
        self.user_settings_manager = user_settings_manager
        self.filter_engine = filter_engine
    
    def get_relevant_projects_for_user(self, user_settings: UserSettings, projects: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            projects: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
            
        Returns:
            List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
        """
        if not user_settings.subscribed:
            return []
        
        return self.filter_engine.filter_projects(projects, user_settings.filters)
    
    def get_relevant_projects_for_all_users(self, projects: List[Dict[str, Any]]) -> Dict[int, List[Dict[str, Any]]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        Args:
            projects: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
            
        Returns:
            Dict[int, List[Dict[str, Any]]]: –°–ª–æ–≤–∞—Ä—å —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–ø–∏—Å–∫–æ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
        """
        relevant_projects = {}
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        subscribed_users = self.user_settings_manager.get_subscribed_users()
        
        for user_settings in subscribed_users:
            user_projects = self.get_relevant_projects_for_user(user_settings, projects)
            if user_projects:
                relevant_projects[user_settings.user_id] = user_projects
        
        return relevant_projects
    
    def format_project_message(self, project: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            project: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        title = project.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        description = project.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
        budget = project.get('budget')
        region = project.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')
        project_type = project.get('type', '–ü—Ä–æ–µ–∫—Ç')
        technologies = project.get('technologies', [])
        url = project.get('url', '')
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        type_label = '–ó–∞–∫–∞–∑' if project_type.lower() == 'order' else '–í–∞–∫–∞–Ω—Å–∏—è' if project_type.lower() == 'vacancy' else '–ü—Ä–æ–µ–∫—Ç'
        
        message = f"üÜï {type_label}\n\n"
        message += f"üìù <b>{title}</b>\n\n"
        
        if description:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
            if len(description) > 300:
                description = description[:297] + "..."
            message += f"üìã <i>{description}</i>\n\n"
        
        if budget is not None:
            message += f"üí∞ –ë—é–¥–∂–µ—Ç: {budget} —Ä—É–±.\n"
        
        if region:
            message += f"üåç –†–µ–≥–∏–æ–Ω: {region}\n"
        
        if technologies:
            message += f"üõ†Ô∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {', '.join(technologies)}\n"
        
        if url:
            message += f"\nüîó –°—Å—ã–ª–∫–∞: {url}"
        
        return message
    
    def get_personalized_notifications(self, projects: List[Dict[str, Any]]) -> Dict[int, List[str]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        Args:
            projects: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
            
        Returns:
            Dict[int, List[str]]: –°–ª–æ–≤–∞—Ä—å —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–ø–∏—Å–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        notifications = {}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        relevant_projects = self.get_relevant_projects_for_all_users(projects)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user_id, user_projects in relevant_projects.items():
            user_notifications = []
            for project in user_projects:
                message = self.format_project_message(project)
                user_notifications.append(message)
            
            if user_notifications:
                notifications[user_id] = user_notifications
        
        return notifications
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏.
"""

import unittest
from unittest.mock import MagicMock
from personalization_engine import PersonalizationEngine
from user_settings_manager import UserSettings, UserFilters
from filter_engine import FilterEngine


class TestPersonalizationEngine(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""

    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.mock_user_settings_manager = MagicMock()
        self.mock_filter_engine = MagicMock(spec=FilterEngine)
        self.personalization_engine = PersonalizationEngine(
            self.mock_user_settings_manager,
            self.mock_filter_engine
        )

    def test_get_relevant_projects_for_user_subscribed(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        user_settings = UserSettings(
            user_id=123456,
            subscribed=True,
            filters=UserFilters(
                keywords=['python'],
                technologies=['python'],
                budget_min=10000,
                budget_max=50000,
                regions=['–ú–æ—Å–∫–≤–∞'],
                project_types=['order']
            )
        )

        projects = [
            {
                'title': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram –±–æ—Ç–∞ –Ω–∞ Python',
                'description': '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á',
                'budget': 30000,
                'region': '–ú–æ—Å–∫–≤–∞',
                'technologies': ['Python', 'Django'],
                'type': 'order'
            },
            {
                'title': '–í–µ—Ä—Å—Ç–∫–∞ —Å–∞–π—Ç–∞',
                'description': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≤–µ—Ä—Å—Ç–∞—Ç—å –º–∞–∫–µ—Ç',
                'budget': 15000,
                'region': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
                'technologies': ['HTML', 'CSS'],
                'type': 'order'
            }
        ]

        # –ú–æ–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        self.mock_filter_engine.filter_projects = MagicMock(return_value=[projects[0]])

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        result = self.personalization_engine.get_relevant_projects_for_user(user_settings, projects)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        self.assertEqual(len(result), 1)
        self.assertEqual(result[0]['title'], '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram –±–æ—Ç–∞ –Ω–∞ Python')
        self.mock_filter_engine.filter_projects.assert_called_once_with(projects, user_settings.filters)

    def test_get_relevant_projects_for_user_unsubscribed(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        user_settings = UserSettings(
            user_id=123456,
            subscribed=False,
            filters=UserFilters(
                keywords=['python'],
                technologies=['python'],
                budget_min=10000,
                budget_max=50000,
                regions=['–ú–æ—Å–∫–≤–∞'],
                project_types=['order']
            )
        )

        projects = [
            {
                'title': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram –±–æ—Ç–∞ –Ω–∞ Python',
                'description': '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á',
                'budget': 3000,
                'region': '–ú–æ—Å–∫–≤–∞',
                'technologies': ['Python', 'Django'],
                'type': 'order'
            }
        ]

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        result = self.personalization_engine.get_relevant_projects_for_user(user_settings, projects)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        self.assertEqual(len(result), 0)

    def test_get_relevant_projects_for_all_users(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        user_settings_1 = UserSettings(
            user_id=123456,
            subscribed=True,
            filters=UserFilters(
                keywords=['python'],
                technologies=['python'],
                budget_min=10000,
                budget_max=50000,
                regions=['–ú–æ—Å–∫–≤–∞'],
                project_types=['order']
            )
        )

        user_settings_2 = UserSettings(
            user_id=789012,
            subscribed=True,
            filters=UserFilters(
                keywords=['javascript'],
                technologies=['javascript'],
                budget_min=5000,
                budget_max=20000,
                regions=['–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'],
                project_types=['order']
            )
        )

        projects = [
            {
                'title': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram –±–æ—Ç–∞ –Ω–∞ Python',
                'description': '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á',
                'budget': 30000,
                'region': '–ú–æ—Å–∫–≤–∞',
                'technologies': ['Python', 'Django'],
                'type': 'order'
            },
            {
                'title': '–í–µ—Ä—Å—Ç–∫–∞ —Å–∞–π—Ç–∞ –Ω–∞ JavaScript',
                'description': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≤–µ—Ä—Å—Ç–∞—Ç—å –º–∞–∫–µ—Ç',
                'budget': 15000,
                'region': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
                'technologies': ['HTML', 'CSS', 'JavaScript'],
                'type': 'order'
            }
        ]

        # –ú–æ–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.mock_user_settings_manager.get_subscribed_users = MagicMock(
            return_value=[user_settings_1, user_settings_2]
        )

        # –ú–æ–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.mock_filter_engine.filter_projects = MagicMock(
            side_effect=[
                [projects[0]],  # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                [projects[1]]   # –î–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ]
        )

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        result = self.personalization_engine.get_relevant_projects_for_all_users(projects)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        self.assertEqual(len(result), 2)
        self.assertIn(123456, result)
        self.assertIn(789012, result)
        self.assertEqual(len(result[123456]), 1)
        self.assertEqual(len(result[789012]), 1)
        self.assertEqual(result[123456][0]['title'], '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram –±–æ—Ç–∞ –Ω–∞ Python')
        self.assertEqual(result[789012][0]['title'], '–í–µ—Ä—Å—Ç–∫–∞ —Å–∞–π—Ç–∞ –Ω–∞ JavaScript')

    def test_format_project_message_basic(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ (–±–∞–∑–æ–≤—ã–π)"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        project = {
            'title': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram –±–æ—Ç–∞',
            'description': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á',
            'budget': 50000,
            'region': '–ú–æ—Å–∫–≤–∞',
            'type': 'order',
            'technologies': ['Python', 'Telegram API'],
            'url': 'https://example.com/project/1'
        }

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        result = self.personalization_engine.format_project_message(project)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        self.assertIn('üÜï –ó–∞–∫–∞–∑', result)
        self.assertIn('üìù <b>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram –±–æ—Ç–∞</b>', result)
        self.assertIn('üìã <i>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á</i>', result)
        self.assertIn('üí∞ –ë—é–¥–∂–µ—Ç: 50000 —Ä—É–±.', result)
        self.assertIn('üåç –†–µ–≥–∏–æ–Ω: –ú–æ—Å–∫–≤–∞', result)
        self.assertIn('üõ†Ô∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: Python, Telegram API', result)
        self.assertIn('üîó –°—Å—ã–ª–∫–∞: https://example.com/project/1', result)

    def test_format_project_message_long_description(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ (–¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ)"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        long_description = 'A' * 400  # 400 —Å–∏–º–≤–æ–ª–æ–≤
        project = {
            'title': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram –±–æ—Ç–∞',
            'description': long_description,
            'budget': 50000,
            'region': '–ú–æ—Å–∫–≤–∞',
            'type': 'order',
            'technologies': ['Python', 'Telegram API'],
            'url': 'https://example.com/project/1'
        }

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        result = self.personalization_engine.format_project_message(project)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        self.assertIn('...', result)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞
        desc_start = result.find('üìã <i>') + len('üìã <i>')
        desc_end = result.find('</i>')
        description_in_result = result[desc_start:desc_end]
        self.assertLess(len(description_in_result), len(long_description))
        self.assertLessEqual(len(description_in_result), 300)

    def test_format_project_message_vacancy(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ (–≤–∞–∫–∞–Ω—Å–∏—è)"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        project = {
            'title': 'Senior Python Developer',
            'description': '–ò—â–µ–º –æ–ø—ã—Ç–Ω–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ Python',
            'budget': 200000,
            'region': '–ú–æ—Å–∫–≤–∞',
            'type': 'vacancy',
            'technologies': ['Python', 'Django', 'PostgreSQL'],
            'url': 'https://example.com/vacancy/1'
        }

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        result = self.personalization_engine.format_project_message(project)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        self.assertIn('üÜï –í–∞–∫–∞–Ω—Å–∏—è', result)
        self.assertIn('üí∞ –ë—é–¥–∂–µ—Ç: 200000 —Ä—É–±.', result)

    def test_get_personalized_notifications(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        projects = [
            {
                'title': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram –±–æ—Ç–∞ –Ω–∞ Python',
                'description': '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á',
                'budget': 3000,
                'region': '–ú–æ—Å–∫–≤–∞',
                'technologies': ['Python', 'Django'],
                'type': 'order',
                'url': 'https://example.com/project/1'
            }
        ]

        user_settings_1 = UserSettings(
            user_id=123456,
            subscribed=True,
            filters=UserFilters(
                keywords=['python'],
                technologies=['python'],
                budget_min=10000,
                budget_max=50000,
                regions=['–ú–æ—Å–∫–≤–∞'],
                project_types=['order']
            )
        )

        # –ú–æ–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.mock_user_settings_manager.get_subscribed_users = MagicMock(
            return_value=[user_settings_1]
        )

        # –ú–æ–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        self.mock_filter_engine.filter_projects = MagicMock(return_value=projects)

        # –ú–æ–∫–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        formatted_message = "–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram –±–æ—Ç–∞ –Ω–∞ Python"
        self.personalization_engine.format_project_message = MagicMock(return_value=formatted_message)

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        result = self.personalization_engine.get_personalized_notifications(projects)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        self.assertEqual(len(result), 1)
        self.assertIn(123456, result)
        self.assertEqual(len(result[123456]), 1)
        self.assertEqual(result[123456][0], formatted_message)

    def test_get_personalized_notifications_no_matches(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        projects = [
            {
                'title': '–í–µ—Ä—Å—Ç–∫–∞ —Å–∞–π—Ç–∞',
                'description': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≤–µ—Ä—Å—Ç–∞—Ç—å –º–∞–∫–µ—Ç',
                'budget': 1500,
                'region': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
                'technologies': ['HTML', 'CSS'],
                'type': 'order'
            }
        ]

        user_settings_1 = UserSettings(
            user_id=123456,
            subscribed=True,
            filters=UserFilters(
                keywords=['python'],
                technologies=['python'],
                budget_min=10000,
                budget_max=50000,
                regions=['–ú–æ—Å–∫–≤–∞'],
                project_types=['order']
            )
        )

        # –ú–æ–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.mock_user_settings_manager.get_subscribed_users = MagicMock(
            return_value=[user_settings_1]
        )

        # –ú–æ–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)
        self.mock_filter_engine.filter_projects = MagicMock(return_value=[])

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        result = self.personalization_engine.get_personalized_notifications(projects)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        self.assertEqual(len(result), 0)


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    unittest.main()
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è–¥—Ä–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞.
"""

import unittest
from unittest.mock import AsyncMock, MagicMock, patch
import asyncio
from telegram import Update, User, Message, Chat
from telegram.ext import ContextTypes

from bot_core import FreelanceBot
from data_storage import DataStorage
from filter_engine import FilterEngine
from personalization_engine import PersonalizationEngine
from notification_engine import NotificationEngine
from notification_scheduler import NotificationScheduler
from user_interaction_tracker import UserInteractionTracker
from user_settings_manager import UserSettingsManager


class TestFreelanceBot(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —è–¥—Ä–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞"""

    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        self.mock_data_storage = MagicMock(spec=DataStorage)
        self.mock_filter_engine = MagicMock(spec=FilterEngine)
        self.mock_personalization_engine = MagicMock(spec=PersonalizationEngine)
        self.mock_notification_engine = MagicMock(spec=NotificationEngine)
        self.mock_notification_scheduler = MagicMock(spec=NotificationScheduler)
        self.mock_user_interaction_tracker = MagicMock(spec=UserInteractionTracker)

        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –º–æ–∫–∞–º–∏
        self.bot = FreelanceBot(
            token="test_token",
            data_storage=self.mock_data_storage,
            filter_engine=self.mock_filter_engine,
            personalization_engine=self.mock_personalization_engine,
            notification_engine=self.mock_notification_engine,
            notification_scheduler=self.mock_notification_scheduler,
            user_interaction_tracker=self.mock_user_interaction_tracker
        )

        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.user = User(id=123456, first_name="Test", is_bot=False)
        self.chat = Chat(id=654321, type="private")
        self.message = Message(
            message_id=1,
            date=None,
            chat=self.chat,
            from_user=self.user
        )
        self.update = Update(update_id=1, message=self.message)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self.context = ContextTypes.DEFAULT_TYPE

    @patch('bot_core.update_user_subscription')
    async def test_start_command(self, mock_update_subscription):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        self.update.message.text = "/start"
        self.context.bot = AsyncMock()
        self.context.bot.send_message = AsyncMock()

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        await self.bot.start_command(self.update, self.context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        self.context.bot.send_message.assert_called_once()
        args, kwargs = self.context.bot.send_message.call_args
        self.assertIn("–ü—Ä–∏–≤–µ—Ç, Test!", kwargs['text'])
        self.assertEqual(kwargs['chat_id'], self.user.id)

    @patch('bot_core.UserSettingsManager')
    async def test_help_command(self, mock_user_settings_manager):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /help"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        self.update.message.text = "/help"
        self.context.bot = AsyncMock()
        self.context.bot.send_message = AsyncMock()

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        await self.bot.help_command(self.update, self.context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        self.context.bot.send_message.assert_called_once()
        args, kwargs = self.context.bot.send_message.call_args
        self.assertIn("ü§ñ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:", kwargs['text'])
        self.assertEqual(kwargs['chat_id'], self.user.id)

    @patch('bot_core.UserSettingsManager')
    async def test_settings_command(self, mock_user_settings_manager):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /settings"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        self.update.message.text = "/settings"
        self.context.bot = AsyncMock()
        self.context.bot.send_message = AsyncMock()

        # –ú–æ–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        mock_settings = MagicMock()
        mock_settings.subscribed = True
        mock_settings.filters.keywords = ["python", "telegram"]
        mock_settings.filters.technologies = ["Python", "JavaScript"]
        mock_settings.filters.budget_min = 1000
        mock_settings.filters.budget_max = 5000
        mock_settings.filters.regions = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"]
        mock_settings.filters.project_types = ["order"]
        mock_settings.filters.experience_level = "middle"
        mock_settings.filters.payment_type = "fixed"

        self.bot.user_settings_manager.get_user_settings = MagicMock(return_value=mock_settings)

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        await self.bot.settings_command(self.update, self.context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        self.context.bot.send_message.assert_called_once()
        args, kwargs = self.context.bot.send_message.call_args
        self.assertIn("‚öôÔ∏è –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", kwargs['text'])
        self.assertIn("–ü–æ–¥–ø–∏—Å–∫–∞: –î–∞", kwargs['text'])
        self.assertIn("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: python, telegram", kwargs['text'])
        self.assertEqual(kwargs['chat_id'], self.user.id)

    @patch('bot_core.UserSettingsManager')
    async def test_filter_command(self, mock_user_settings_manager):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /filter"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        self.update.message.text = "/filter"
        self.context.bot = AsyncMock()
        self.context.bot.send_message = AsyncMock()

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        await self.bot.filter_command(self.update, self.context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        self.context.bot.send_message.assert_called_once()
        args, kwargs = self.context.bot.send_message.call_args
        self.assertIn("üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤:", kwargs['text'])
        self.assertEqual(kwargs['chat_id'], self.user.id)

    @patch('bot_core.UserSettingsManager')
    async def test_subscribe_command(self, mock_user_settings_manager):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /subscribe"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        self.update.message.text = "/subscribe"
        self.context.bot = AsyncMock()
        self.context.bot.send_message = AsyncMock()

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        await self.bot.subscribe_command(self.update, self.context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        self.context.bot.send_message.assert_called_once()
        args, kwargs = self.context.bot.send_message.call_args
        self.assertIn("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å", kwargs['text'])
        self.assertEqual(kwargs['chat_id'], self.user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        self.bot.user_settings_manager.update_user_subscription.assert_called_once_with(self.user.id, True)

    @patch('bot_core.UserSettingsManager')
    async def test_unsubscribe_command(self, mock_user_settings_manager):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /unsubscribe"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        self.update.message.text = "/unsubscribe"
        self.context.bot = AsyncMock()
        self.context.bot.send_message = AsyncMock()

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        await self.bot.unsubscribe_command(self.update, self.context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        self.context.bot.send_message.assert_called_once()
        args, kwargs = self.context.bot.send_message.call_args
        self.assertIn("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å", kwargs['text'])
        self.assertEqual(kwargs['chat_id'], self.user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        self.bot.user_settings_manager.update_user_subscription.assert_called_once_with(self.user.id, False)

    async def test_send_notification(self):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        self.context.bot = AsyncMock()
        self.context.bot.send_message = AsyncMock()

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        await self.bot.send_notification(self.user.id, "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        self.context.bot.send_message.assert_called_once_with(
            chat_id=self.user.id,
            text="–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
        )

    async def test_handle_project_notification_request(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        project_data = {
            'title': '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç',
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞',
            'budget': 10000,
            'url': 'https://example.com/project/1'
        }
        self.mock_notification_engine.send_personalized_notifications_for_projects = AsyncMock(return_value=[1])

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        await self.bot.handle_project_notification_request(project_data)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        self.mock_notification_engine.send_personalized_notifications_for_projects.assert_called_once_with([project_data])

    async def test_track_user_interaction(self):
        """–¢–µ—Å—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–µ–∫—Ç–æ–º"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        user_id = 123456
        project_id = "project_123"
        interaction_type = "view"

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        await self.bot.track_user_interaction(user_id, project_id, interaction_type)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        self.mock_user_interaction_tracker.record_interaction.assert_called_once_with(user_id, project_id, interaction_type)


class TestBotCoreFunctions(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —è–¥—Ä–∞ –±–æ—Ç–∞"""

    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.user = User(id=123456, first_name="Test", is_bot=False)
        self.chat = Chat(id=654321, type="private")
        self.message = Message(
            message_id=1,
            date=None,
            chat=self.chat,
            from_user=self.user
        )
        self.update = Update(update_id=1, message=self.message)
        self.context = ContextTypes.DEFAULT_TYPE

    @patch('bot_core.UserSettingsManager')
    async def test_add_keywords(self, mock_user_settings_manager):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        self.context.args = ["python", "telegram", "bot"]
        self.context.bot_data = {'bot_core': MagicMock()}
        mock_bot_core = self.context.bot_data['bot_core']
        self.context.bot = AsyncMock()
        self.context.bot.send_message = AsyncMock()

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        await self.bot.add_keywords(self.update, self.context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        mock_bot_core.user_settings_manager.add_keywords.assert_called_once_with(
            self.user.id,
            ["python", "telegram", "bot"]
        )
        self.context.bot.send_message.assert_called_once()
        args, kwargs = self.context.bot.send_message.call_args
        self.assertIn("‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã: python, telegram, bot", kwargs['text'])

    @patch('bot_core.UserSettingsManager')
    async def test_remove_keywords(self, mock_user_settings_manager):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        self.context.args = ["python", "old_keyword"]
        self.context.bot_data = {'bot_core': MagicMock()}
        mock_bot_core = self.context.bot_data['bot_core']
        self.context.bot = AsyncMock()
        self.context.bot.send_message = AsyncMock()

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        await self.bot.remove_keywords(self.update, self.context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        mock_bot_core.user_settings_manager.remove_keywords.assert_called_once_with(
            self.user.id,
            ["python", "old_keyword"]
        )
        self.context.bot.send_message.assert_called_once()
        args, kwargs = self.context.bot.send_message.call_args
        self.assertIn("‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —É–¥–∞–ª–µ–Ω—ã: python, old_keyword", kwargs['text'])

    @patch('bot_core.UserSettingsManager')
    async def test_set_budget(self, mock_user_settings_manager):
        """–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—é–¥–∂–µ—Ç–∞"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        self.context.args = ["1000", "5000"]
        self.context.bot_data = {'bot_core': MagicMock()}
        mock_bot_core = self.context.bot_data['bot_core']
        self.context.bot = AsyncMock()
        self.context.bot.send_message = AsyncMock()

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        await self.bot.set_budget(self.update, self.context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        mock_bot_core.user_settings_manager.set_budget.assert_called_once_with(
            self.user.id,
            1000,
            5000
        )
        self.context.bot.send_message.assert_called_once()
        args, kwargs = self.context.bot.send_message.call_args
        self.assertIn("‚úÖ –ë—é–¥–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: 1000 - 5000", kwargs['text'])

    @patch('bot_core.UserSettingsManager')
    async def test_set_regions(self, mock_user_settings_manager):
        """–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        self.context.args = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"]
        self.context.bot_data = {'bot_core': MagicMock()}
        mock_bot_core = self.context.bot_data['bot_core']
        self.context.bot = AsyncMock()
        self.context.bot.send_message = AsyncMock()

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        await self.bot.set_regions(self.update, self.context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        mock_bot_core.user_settings_manager.set_regions.assert_called_once_with(
            self.user.id,
            ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"]
        )
        self.context.bot.send_message.assert_called_once()
        args, kwargs = self.context.bot.send_message.call_args
        self.assertIn("‚úÖ –†–µ–≥–∏–æ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", kwargs['text'])

    @patch('bot_core.UserSettingsManager')
    async def test_set_project_types(self, mock_user_settings_manager):
        """–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∏–ø–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        self.context.args = ["–∑–∞–∫–∞–∑", "–≤–∞–∫–∞–Ω—Å–∏—è"]
        self.context.bot_data = {'bot_core': MagicMock()}
        mock_bot_core = self.context.bot_data['bot_core']
        self.context.bot = AsyncMock()
        self.context.bot.send_message = AsyncMock()

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        await self.bot.set_project_types(self.update, self.context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        mock_bot_core.user_settings_manager.set_project_types.assert_called_once_with(
            self.user.id,
            ["order", "vacancy"]
        )
        self.context.bot.send_message.assert_called_once()
        args, kwargs = self.context.bot.send_message.call_args
        self.assertIn("‚úÖ –¢–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã: –∑–∞–∫–∞–∑, –≤–∞–∫–∞–Ω—Å–∏—è", kwargs['text'])


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    unittest.main()